<!DOCTYPE html>
<html>
<head>
  <meta content='text/html; charset=UTF-8' http-equiv='Content-Type' />
</head>
<body>
<h1>Hello <%= @user.user_detail.name %>,</h1>
<p>
  It's a long mail, sorry if I borrow you...<br/>
  As Administrator, you have registered the new app <%@app.name%>. These are the instructions and the OAuth2 data you have to use to connect you application to our server.
</p>
<p>
  Remember: some of this data are stored encrypted, so save this email for future details.
</p>
<pre>
  client_id: <%=@app.id.to_s%>
  client_secret: <%=@secret%>
</pre>
<p>We support 3 different kind of authentication via API: code, implicit and password: in this email we describe only the ones you have enabled for your application.</p>
<% if @app.enable_code %>
  <h3>Code mode</h3>
  <p>
    Code is the most secure way to interact with us, but is useful only in server-to-server authentication because we need to authenticate the user and the application.<br/>
    In this mode, user has to login locally to OAuth2 server (or it has to create an account if he doesn't have one), then he have to authorize the link to application. <br/>
    After this two steps, we return an authorization_code to your app valid for 1 minute and you can use it only one time to get an Access-Token and a renew token.<br/>
    The Access-Token is the one useful for authenticate the user, but is valid only for 60 minutes: when it expire, you have to request a new one using the renew token.
  </p>
  <h6>Authorization</h6>
  <p>To request the authorization token, direct your user to <code><%=oauth2_authorize_url%></code> via POST call; in body you have to send:</p>
  <ul>
    <li><b>response_type</b> (required): the kind of the response expected, <code>code</code> in this case</li>
    <li><b>client_id</b> (required): the client_id of your application, <code><%=@app.id.to_s%></code> in this case</li>
    <li><b>state</b> (optional): an arbitrary string that will be included in the response of your application. We recommend that you use an anti-forgery state token to prevent CSRF attacks</li>
  </ul>
  <p>
    Now, the user will be redirected to the web interface of authentication system where he has to login (or register if he doesn't have an account) and authorize your application.<br/>
    After that, he will be redirected to your site at <code><%=@app.redirect_uri%></code> in GET; for example to:
  </p>
  <pre>
    <%=@app.redirect_uri%>?code=123456789abcdef&state=YOUR_CSRF_PREVENTION_CODE
  </pre>
  <p>If the user clicks on "deny", you will recieve a request with an <code>error</code> and an optional <code>error_description</code> parametes, such as:</p>
  <pre>
    <%=@app.redirect_uri%>?error=access_denied&error_description=The+user+denied+access+to+your+application
  </pre>
  <p>The possible errors are:</p>
  <ul>
    <li><b>invalid_request</b>: the request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed</li>
    <li><b>unsupported_response_type</b>: check the value of the code parameter on your request</li>
    <li><b>access_denied</b>: the user or the authorization server denied the request</li>
    <li><b>server_error</b>: a generic error server-side</li>
  </ul>
  <p>The error parameter will be always present, but the human readable error_description not: so, your code should relay on error parameter</p>
  <p>Now, before you request the access token, you have to check for the CSRF prevention code in "state" parameter, if you have included it.</p>
  <h6>Access token</h6>
  <p>Once your application has completed the above section and gotten an authorization code, it'll now need to exchange the authorization token for an access token.</p>
  <p>To get an access token, you have to POST request to <code><%=oauth2_token_url%></code> with the following parameters:</p>
  <ul>
    <li><b>grant_type</b> (required): in this case must be <code>authorization_code</code></li>
    <li><b>code</b> (required): the authorization code you retrieved previously</li>
    <li><b>client_id</b> (required): the client_id of your application, <code><%=@app.id.to_s%></code> in this case</li>
    <li><b>client_secret</b> (required): the client_secret of your application, <code><%=@secret%></code> in this case</li>
  </ul>
  <p>the request must be over HTTPS and the parameters must be <b>URL encoded</b></p>
  <p>If everything goes right and the request is successful, you'll receive a <code>200</code> response containing a JSON body like this:</p>
  <pre>
  {
      "access_token": "T9cE5asGnuyYCCqIZFoWjFHvNbvVqHjl",
      "expires_in": 3600,
      "restricted_to": [],
      "token_type": "bearer",
      "refresh_token": "J7rxTiWOHMoSC1isKZKBZWizoRXjkQzig5C6jFgCVJ9bUnsUfGMinKBDLZWP9BgR"
  }
  </pre>
  <p>However, if the response is <i>not</i> succesful, you'll receive an error response, such as this:</p>
  <pre>
  {
      "error": "invalid_grant",
      "error_description": "Invalid user credentials"
  }
  </pre>
  <p>The possible errors are:</p>
  <ul>
    <li><b>invalid_request</b>: the request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed</li>
    <li><b>unauthorized_client</b>: the grant type is unauthorized for this client_id/li>
    <li><b>invalid_grant</b>: the client credentials are invalid</li>
    <li><b>server_error</b>: a generic error server-side</li>
  </ul>
  <h6>Using the Access and Refresh token</h6>
  <p>
    The <code>access_token</code> is the actual string needed to make API requests. Each access_token is valid for 1 hour. In order to get a new, valid token, you can use the accompanying
    <code>refresh_token</code>. Each refresh_token is valid for one use in 60 days. Every time you get a new access_token by using a refresh_token, we reset your timer for the 60 day period
    and hand you a new refresh_token. This means that as long as your users use your application once every 60 days, their login is valid forever. To use the refresh_token to get a new
    access_token, make a POST request to <code><%=oauth2_token_url%></code> with the following, URL encoded parameters:</p>
  <ul>
    <li><b>grant_type</b> (required): in this case must be <code>refresh_token</code></li>
    <li><b>refresh_token</b> (required): the refresh token</li>
    <li><b>client_id</b> (required): the client_id of your application, <code><%=@app.id.to_s%></code> in this case</li>
    <li><b>client_secret</b> (required): the client_secret of your application, <code><%=@secret%></code> in this case</li>
  </ul>
  <p>If the request will be successfully, you receive a JSON like this</p>
  <pre>
  {
      "access_token": "QAcE5asGnRTYCCq45foWjFHvKKvVq45s",
      "expires_in": 3600,
      "restricted_to": [],
      "token_type": "bearer",
      "refresh_token": "45SdliWOHMoSC1isKZK45DSzoRXjkQzig5C6jFgCVJ9bUnsUfGMinKBDL69poIU8"
  }
  </pre>
  <p>As you can see, with this request, you'll receive both a new access_token and refresh_token. The refresh_token you used to make this request is no longer valid.</p>
  <p>
    The access token is a string in JWT format, encoded with the client_id of your application (<%=@app.id.to_s%>). If you decode it, you'll get a JSON with all user information
    stored in our database, so you don't have to make another request to get this data.
  </p>
  <h6>Using the access token</h6>
  <p>To use the access token, you only have to make a POST request to <%=checks_url%> with the "access_token" header like this:</p>
  <pre>
     access_token: {a valid access token}
  </pre>
  <p>You'll receive a <code>OK</code> string with 200 status if the user is authenticated, else a <code>Error</code> string with a 401 status</p>
  <h6>Destroy an access token</h6>
  <p>
    If you have a "Log Out" button in your App and you want to destroy a token (both access_token and renew_token) you have to make a POST request to <code><%=oauth2_revoke_path%></code>
    with this data:
  </p>
  <ul>
    <li><b>client_id</b> (required): the client_id of your application, <code><%=@app.id.to_s%></code> in this case</li>
    <li><b>client_secret</b> (required): the client_secret of your application, <code><%=@secret%></code> in this case</li>
    <li><b>token</b> (required): The access_token or refresh_token to be destroyed. Only one is required, though both will be destroyed.</li>
  </ul>
<% end %>


<% if @app.enable_implicit %>
  <h3>Implicit mode</h3>
  <p>
    Implicit mode is a more easy way to interact with the authentication system. Is used in all the case where isn't possible to store data in a secure way, for example in a Javascript only application or in a mobile app.<br/>
    In this mode, user has only to login locally to OAuth2 server (or it has to create an account if he doesn't have one) and authorize your application. <br/>
    After this step, we return an Access-Token and a renew token.<br/>
    The Access-Token is the one useful for authenticate the user, but is valid only for 60 minutes: when it expire, you have to request a new one using the renew token.
  </p>
  <h6>Authentication</h6>
  <p>To request the authorization token, direct your user to <code><%=oauth2_authorize_url%></code> via POST call; in body you have to send:</p>
  <ul>
    <li><b>response_type</b> (required): the kind of the response expected, <code>token</code> in this case</li>
    <li><b>client_id</b> (required): the client_id of your application, <code><%=@app.id.to_s%></code> in this case</li>
    <li><b>state</b> (optional): an arbitrary string that will be included in the response of your application. We recommend that you use an anti-forgery state token to prevent CSRF attacks</li>
  </ul>
  <p>
    Now, the user will be redirected to the web interface of authentication system where he has to login (or register if he doesn't have an account) and authorize your application.<br/>
    After that, he will be redirected to your site at <code><%=@app.redirect_uri%></code> in GET; for example to:
  </p>
  <pre>
    <%=@app.redirect_uri%>?access_token=T9cE5asGnuyYCCqIZFoWjFHvNbvVqHjl&renew_token=J7rxTiWOHMoSC1isKZKBZWizoRXjkQzig5C6jFgCVJ9bUnsUfGMinKBDLZWP9BgR&state=YOUR_CSRF_PREVENTION_CODE
  </pre>
  <p>If the user clicks on "deny", you will recieve a request with an <code>error</code> and an optional <code>error_description</code> parametes, such as:</p>
  <pre>
    <%=@app.redirect_uri%>?error=access_denied&error_description=The+user+denied+access+to+your+application
  </pre>
  <p>The possible errors are:</p>
  <ul>
    <li><b>invalid_request</b>: the request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed</li>
    <li><b>unsupported_response_type</b>: check the value of the code parameter on your request</li>
    <li><b>access_denied</b>: the user or the authorization server denied the request</li>
    <li><b>server_error</b>: a generic error server-side</li>
  </ul>
  <p>The error parameter will be always present, but the human readable error_description not: so, your code should relay on error parameter</p>
  <p>Now, before using the access token, you have to check for the CSRF prevention code in "state" parameter, if you have included it.</p>
  <h6>Using the Access and Refresh token</h6>
  <p>
    The <code>access_token</code> is the actual string needed to make API requests. Each access_token is valid for 1 hour. In order to get a new, valid token, you can use the accompanying
    <code>refresh_token</code>. Each refresh_token is valid for one use in 60 days. Every time you get a new access_token by using a refresh_token, we reset your timer for the 60 day period
    and hand you a new refresh_token. This means that as long as your users use your application once every 60 days, their login is valid forever. To use the refresh_token to get a new
    access_token, make a POST request to <code><%=oauth2_token_url%></code> with the following, URL encoded parameters:</p>
  <ul>
    <li><b>grant_type</b> (required): in this case must be <code>refresh_token</code></li>
    <li><b>refresh_token</b> (required): the refresh token</li>
    <li><b>client_id</b> (required): the client_id of your application, <code><%=@app.id.to_s%></code> in this case</li>
    <li><b>client_secret</b> (required): the client_secret of your application, <code><%=@secret%></code> in this case</li>
  </ul>
  <p>If the request will be successfully, you receive a JSON like this</p>
  <pre>
  {
      "access_token": "QAcE5asGnRTYCCq45foWjFHvKKvVq45s",
      "expires_in": 3600,
      "restricted_to": [],
      "token_type": "bearer",
      "refresh_token": "45SdliWOHMoSC1isKZK45DSzoRXjkQzig5C6jFgCVJ9bUnsUfGMinKBDL69poIU8"
  }
  </pre>
  <p>As you can see, with this request, you'll receive both a new access_token and refresh_token. The refresh_token you used to make this request is no longer valid.</p>
  <p>
    The access token is a string in JWT format, encoded with the client_id of your application (<%=@app.id.to_s%>). If you decode it, you'll get a JSON with all user information
    stored in our database, so you don't have to make another request to get this data.
  </p>
  <h6>Using the access token</h6>
  <p>To use the access token, you only have to make a POST request to <%=checks_url%> with the "access_token" header like this:</p>
  <pre>
     access_token: {a valid access token}
  </pre>
  <p>You'll receive a <code>OK</code> string with 200 status if the user is authenticated, else a <code>Error</code> string with a 401 status</p>
  <h6>Destroy an access token</h6>
  <p>
    If you have a "Log Out" button in your App and you want to destroy a token (both access_token and renew_token) you have to make a POST request to <code><%=oauth2_revoke_path%></code>
    with this data:
  </p>
  <ul>
    <li><b>client_id</b> (required): the client_id of your application, <code><%=@app.id.to_s%></code> in this case</li>
    <li><b>client_secret</b> (required): the client_secret of your application, <code><%=@secret%></code> in this case</li>
    <li><b>token</b> (required): The access_token or refresh_token to be destroyed. Only one is required, though both will be destroyed.</li>
  </ul>
<% end %>

<% if @app.enable_password %>
  <h3>Password mode</h3>
  <p>
    Password mode is useful when you don't want a redirection to the authorization site, but you want to collect directly username and password.<br/>
    Is the less secure way to interact with us, so use it only when you need that.
  </p>
  <h6>Access token</h6>
  <p>To get an access token, you have to POST request to <code><%=oauth2_token_url%></code> with the following parameters:</p>
  <ul>
    <li><b>grant_type</b> (required): in this case must be <code>password</code></li>
    <li><b>username</b> (required): the username</li>
    <li><b>password</b> (required): the password</li>
    <li><b>client_id</b> (required): the client_id of your application, <code><%=@app.id.to_s%></code> in this case</li>
  </ul>
  <p>the request must be over HTTPS and the parameters must be <b>URL encoded</b></p>
  <p>If everything goes right and the request is successful, you'll receive a <code>200</code> response containing a JSON body like this:</p>
  <pre>
  {
      "access_token": "T9cE5asGnuyYCCqIZFoWjFHvNbvVqHjl",
      "expires_in": 3600,
      "restricted_to": [],
      "token_type": "bearer",
      "refresh_token": "J7rxTiWOHMoSC1isKZKBZWizoRXjkQzig5C6jFgCVJ9bUnsUfGMinKBDLZWP9BgR"
  }
  </pre>
  <p>However, if the response is <i>not</i> succesful, you'll receive an error response, such as this:</p>
  <pre>
  {
      "error": "invalid_grant",
      "error_description": "Invalid user credentials"
  }
  </pre>
  <p>The possible errors are:</p>
  <ul>
    <li><b>invalid_request</b>: the request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed</li>
    <li><b>unauthorized_client</b>: the grant type is unauthorized for this client_id/li>
    <li><b>invalid_grant</b>: the client credentials are invalid</li>
    <li><b>server_error</b>: a generic error server-side</li>
  </ul>
  <h6>Using the Access and Refresh token</h6>
  <p>
    The <code>access_token</code> is the actual string needed to make API requests. Each access_token is valid for 1 hour. In order to get a new, valid token, you can use the accompanying
    <code>refresh_token</code>. Each refresh_token is valid for one use in 60 days. Every time you get a new access_token by using a refresh_token, we reset your timer for the 60 day period
    and hand you a new refresh_token. This means that as long as your users use your application once every 60 days, their login is valid forever. To use the refresh_token to get a new
    access_token, make a POST request to <code><%=oauth2_token_url%></code> with the following, URL encoded parameters:</p>
  <ul>
    <li><b>grant_type</b> (required): in this case must be <code>refresh_token</code></li>
    <li><b>refresh_token</b> (required): the refresh token</li>
    <li><b>client_id</b> (required): the client_id of your application, <code><%=@app.id.to_s%></code> in this case</li>
    <li><b>client_secret</b> (required): the client_secret of your application, <code><%=@secret%></code> in this case</li>
  </ul>
  <p>If the request will be successfully, you receive a JSON like this</p>
  <pre>
  {
      "access_token": "QAcE5asGnRTYCCq45foWjFHvKKvVq45s",
      "expires_in": 3600,
      "restricted_to": [],
      "token_type": "bearer",
      "refresh_token": "45SdliWOHMoSC1isKZK45DSzoRXjkQzig5C6jFgCVJ9bUnsUfGMinKBDL69poIU8"
  }
  </pre>
  <p>As you can see, with this request, you'll receive both a new access_token and refresh_token. The refresh_token you used to make this request is no longer valid.</p>
  <p>
    The access token is a string in JWT format, encoded with the client_id of your application (<%=@app.id.to_s%>). If you decode it, you'll get a JSON with all user information
    stored in our database, so you don't have to make another request to get this data.
  </p>
  <h6>Using the access token</h6>
  <p>To use the access token, you only have to make a POST request to <%=checks_url%> with the "access_token" header like this:</p>
  <pre>
     access_token: {a valid access token}
  </pre>
  <p>You'll receive a <code>OK</code> string with 200 status if the user is authenticated, else a <code>Error</code> string with a 401 status</p>
  <h6>Destroy an access token</h6>
  <p>
    If you have a "Log Out" button in your App and you want to destroy a token (both access_token and renew_token) you have to make a POST request to <code><%=oauth2_revoke_path%></code>
    with this data:
  </p>
  <ul>
    <li><b>client_id</b> (required): the client_id of your application, <code><%=@app.id.to_s%></code> in this case</li>
    <li><b>client_secret</b> (required): the client_secret of your application, <code><%=@secret%></code> in this case</li>
    <li><b>token</b> (required): The access_token or refresh_token to be destroyed. Only one is required, though both will be destroyed.</li>
  </ul>
<% end %>

<p>
  Thanks again,
</p>
<p>
  Norby, the Robot
</p>
</body>
</html>