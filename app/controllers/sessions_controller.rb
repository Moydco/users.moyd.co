class SessionsController < ApplicationController

  # Log in form
  def new
    if signed_in?
      render text: "Already authenticated with #{@current_user[:email]}"
    end
  end

  # sign in with an autogenerated authorization grant
  # your app has to send us a grant token in JWT format. The JSON part must be in
  # {"email":"user@domain.tld","password":"123456789"}
  # encoded with the application seceret
  def sign_with_grant
    if Settings.multi_application.downcase == 'false'
      app_secret = Settings.single_application_mode_secret
    else
      if Settings.parameters_by_header == 'true'
        app_secret = Application.find(request.headers[Settings.application_name]).secret
      else
        app_secret = Application.find(params[Settings.application_name]).secret
      end
    end
    if Settings.parameters_by_header == 'true'
      grant = request.headers[Settings.grant_name]
    else
      grant = params[Settings.grant_name]
    end

    logger.debug "Grant: #{grant}"
    logger.debug "Secret: #{app_secret}"

    user_to_auth = JSON.parse(JWT.decode(grant, app_secret))

    logger.debug user_to_auth

    user = User.where(email: user_to_auth["email"].downcase).first
    # check if the password is correct
    if !user.nil? && user.authenticate(user_to_auth["password"])
      if Settings.multi_application.downcase == 'false' or
          (Settings.multi_application.downcase == 'true' and !user.applications.find(application_id).nil?) or
          (Settings.multi_application.downcase == 'true' and user.applications.find(application_id).nil? and Settings.multi_application_login.downcase == 'true')
        # Sign in user definitively
        sign_in user
        render text: JWT.encode(user.to_json, app_secret)
      else
        render text: 'User can\'t access to this application', status: 401
      end
    else
      render text: 'User or password not correct', status: 401
    end

  end

  # sign in the user
  def create
    # find the user in persistent DB
    user = User.where(email: params[:session][:email].downcase).first
    # check if the password is correct
    if !user.nil? && user.authenticate(params[:session][:password])
      # check the authority to log in tho this application
      if Settings.multi_application.downcase == 'false' or
          (Settings.multi_application.downcase == 'true' and !user.applications.find(application_id).nil?) or
          (Settings.multi_application.downcase == 'true' and user.applications.find(application_id).nil? and Settings.multi_application_login.downcase == 'true')
        # Sign in user definitively
        sign_in user
        if user.is_admin?
          redirect_to root_path
        else
          # Redirect to user page if the user have not full invoice data, else redirect to application
          if user.data_complete? and user.confirmed?
            if Settings.multi_application.downcase == 'false'
              redirect_to Settings.single_application_mode_url + Settings.single_application_mode_path
            else
              redirect_to application.url + application.path
            end
          else
            redirect_to edit_user_user_details_path(user)
          end
        end
      else
        # Error: application isn't correct
        flash.now[:error] = 'Invalid application for this user'
        render 'new'
      end
    else
      # Error: wrong user/pass
      flash.now[:error] = 'Invalid email/password combination'
      render 'new'
    end
  end

  # sign out user and redirect to application home
  def destroy
    sign_out
    if Settings.multi_application.downcase == 'false'
      redirect_to Settings.single_application_mode_url
    else
      redirect_to application.url
    end
  end

  # password lost: insert the email
  def password_lost

  end

  # password lost: send token via email
  def password_lost_do
    user = User.where(email: params[:user][:email].downcase).first
    if user.nil?
      flash[:error] = 'Sorry, email not found'
    else
      user.create_password_lost_token
      UserMailer.password_lost(user).deliver
      flash[:success] = 'We have found your email and send you the instruction to recover your password. If you don\'t find it in a couple of minutes, please check your spam folder.'
    end
  end

  # password lost: get the token
  def get_token_password_lost

  end

  # password lost: check the token and redirect to update password
  def check_token_password_lost
    user = User.where(password_lost_token: params[:user][:password_lost_token]).first
    if user.nil?
      flash[:error]='Token not found'
      redirect_to password_lost_sessions_url
    else
      if DateTime.now > user.password_lost_expire
        flash[:error]='Token expired'
        redirect_to password_lost_sessions_url
      else
        sign_in user
        flash[:notice] = "Hello #{user.user_detail.name}. Please, change your password"
        redirect_to edit_user_path(user)
      end
    end
  end
end
